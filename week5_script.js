const day = 24.0*60*60; //—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∑–µ–º–Ω–æ–≥–æ –¥–Ω—è —É —Å–µ–∫—É–Ω–¥–∞—Ö
const dt = day/0.5; //–∫—Ä–æ–∫ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è
const G=6.67e-11; //–≥—Ä–∞–≤—ñ—Ç–∞—Ü—ñ–π–Ω–∞ —Å—Ç–∞–ª–∞
let VISUAL_SCALE_FACTOR = 1;

AFRAME.registerComponent('planet', {
    schema: {
        name: {type: 'string', default: ""}, //—ñ–º'—è –ø–ª–∞–Ω–µ—Ç–∏
        //—Å–µ—Ä–µ–¥–Ω—è –≤—ñ–¥—Å—Ç–∞–Ω—å –ø–ª–∞–Ω–µ—Ç–∏ –≤—ñ–¥ –°–æ–Ω—Ü—è
        dist: {type: 'number', default: 0},
        mass: {type: 'number', default: 0}, //–º–∞—Å–∞ –ø–ª–∞–Ω–µ—Ç–∏, –∫–≥
        T: {type: 'number', default: 0}, //–ø–ª–∞–Ω–µ—Ç–∞—Ä–Ω–∏–π —Ä—ñ–∫, –∑–µ–º–Ω–∏—Ö –¥–Ω—ñ–≤
        v: {type: 'array', default: [0,0,0]}, //–≤–µ–∫—Ç–æ—Ä —à–≤–∏–¥–∫–æ—Å—Ç—ñ
        a: {type: 'array', default: [0,0,0]}, //–≤–µ–∫—Ç–æ—Ä –ø—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è
        //–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–∏–π —Ä–∞–¥—ñ—É—Å-–≤–µ–∫—Ç–æ—Ä
        pos: {type: 'array', default: [0,0,0]},
        vS: {type: 'number', default: 0}

    },
    init: function () {
        this.data.T*=day; //–ø–µ—Ä–µ–≤–æ–¥–∏–º–æ —ñ–∑ –∑–µ–º–Ω–∏—Ö –¥–Ω—ñ–≤ —É —Å–µ–∫—É–Ω–¥–∏
        this.data.pos[0]=this.data.dist; //—Ä–æ–∑—Ç–∞—à–æ–≤—É—î–º–æ –Ω–∞ –≤—ñ—Å—ñ x
        //–≤—ñ–∑—É–∞–ª—å–Ω—É –ø–æ–∑–∏—Ü—ñ—é –≤–∏—Ä–∞–∂–∞—î–º–æ —É –º—ñ–ª—å–π–æ–Ω–∞—Ö –∫—ñ–ª–æ–º–µ—Ç—Ä—ñ–≤
        this.el.setAttribute('position',this.data.dist/1e9+' 0 0');
        if(this.data.T!=0)//–¥–ª—è –≤—Å—ñ—Ö –æ–±'—î–∫—Ç—ñ–≤, –∫—Ä—ñ–º –°–æ–Ω—Ü—è,
            //–æ–±—á–∏—Å–ª—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—É —à–≤–∏–¥–∫—ñ—Å—Ç—å –≤–∑–¥–æ–≤–∂ –≤—ñ—Å—ñ y
            this.data.v[1] = 2*Math.PI*this.data.dist/this.data.T;

    }
});

AFRAME.registerComponent('main', {
    init: function() {
        this.solar_system = document.querySelectorAll('[planet]');
    },
    tick: function (time, deltaTime) {
        for(var i = 0; i < this.solar_system.length; i++) {
            let planetEntity = this.solar_system[i];
            let planetData = planetEntity.components.planet.data;

            // üõë –§–∏–∫—Å–∏—Ä—É–µ–º –°–æ–ª–Ω—Ü–µ
            if (planetData.name === "Sun") {
                planetData.v = [0, 0, 0];
                planetData.a = [0, 0, 0];
                planetData.pos = [0, 0, 0];
                planetEntity.setAttribute('position', '0 0 0');
                continue;
            }

            // –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–∏ –∏ –¥–≤–∏–∂–µ–Ω–∏—è
        }

        for(var i = 0; i<this.solar_system.length; i++) {
            let planetEntity = this.solar_system[i];
            let planetData = planetEntity.components.planet.data;

            planet_i=this.solar_system[i].getAttribute('planet');
            planet_i.a[0]=planet_i.a[1]=planet_i.a[2]=0;
            for(var j = 0; j<this.solar_system.length; j++) {
                planet_j=this.solar_system[j].getAttribute('planet');
                if(i!=j) {
                    deltapos = [0,0,0];
                    for(var k = 0; k < 3; k++)
                        deltapos[k]=planet_j.pos[k]-planet_i.pos[k];
                    var r=Math.sqrt(Math.pow(deltapos[0],2)+
                        Math.pow(deltapos[1],2)+Math.pow(deltapos[2],2));
                    for(var k = 0; k < 3; k++)
                        planet_i.a[k]+=G*planet_j.mass*deltapos[k]/
                            Math.pow(r, 3);
                }
            }
            for(var k = 0; k < 3; k++)
                planet_i.v[k]+=planet_i.a[k]*dt;
            for(var k = 0; k < 3; k++)
                planet_i.pos[k]+=planet_i.v[k]*dt;
            this.solar_system[i].setAttribute('position',
                (planet_i.pos[0]/1e9)+' '+(planet_i.pos[1]/1e9)+
                ' '+(planet_i.pos[2]/1e9));
            let visualScale = planetData.vS || VISUAL_SCALE_FACTOR;

            this.solar_system[i].setAttribute('position',
                (planet_i.pos[0]/1e9 * visualScale)+' '+
                (planet_i.pos[1]/1e9 * visualScale)+' '+
                (planet_i.pos[2]/1e9 * visualScale));
        }

    }


});

AFRAME.registerComponent('saturn-rings', {
    schema: {
        parentId: {type: 'string', default: ''}
    },
    tick: function () {
        if (!this.parentPlanet) {
            this.parentPlanet = document.querySelector('#' + this.data.parentId);
            if (!this.parentPlanet) return;
        }

        // –ö–æ–ø–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –ø–ª–∞–Ω–µ—Ç—ã
        const parentPosition = this.parentPlanet.getAttribute('position');
        this.el.setAttribute('position', parentPosition);

        // –ö–æ–ø–∏—Ä—É–µ–º –≤—Ä–∞—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        const parentRotation = this.parentPlanet.object3D.rotation;
        this.el.object3D.rotation.y = parentRotation.y;
    }
});